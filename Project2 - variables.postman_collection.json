{
	"info": {
		"_postman_id": "0157f600-4757-481d-b3d2-f8851abc4c60",
		"name": "Project2 - variables",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6577597",
		"_collection_link": "https://www.postman.com/grey-space-54533/workspace/comcasttraining/collection/6577597-0157f600-4757-481d-b3d2-f8851abc4c60?action=share&source=collection_link&creator=6577597"
	},
	"item": [
		{
			"name": "POSITIVE TC Env valiables",
			"item": [
				{
					"name": "NEGATIVE TESTCASES",
					"item": [
						{
							"name": "UNSUPPORTED HTTP METHOD",
							"item": [
								{
									"name": "DELETE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is client side error\", function() {\r",
													"    pm.response.to.be.clientError;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://gorest.co.in/public/v2/users/6921433",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users",
												"6921433"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE USER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is client side error\", function() {\r",
													"    pm.response.to.be.clientError;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"Krithiga123\", \"gender\":\"Female\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users/6921433",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users",
												"6921433"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify if response code is 200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Response time is less than 5s\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"pm.test(\"Verify if response body is received from server\", function () {\r",
													"    pm.response.to.have.body();\r",
													"});\r",
													"pm.test(\"Verify if response body is received in json format\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id\");\r",
													"    pm.expect(pm.response.text()).to.include(\"name\");\r",
													"    pm.expect(pm.response.text()).to.include(\"email\")\r",
													"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
													"    pm.expect(pm.response.text()).to.include(\"status\")\r",
													"});\r",
													"pm.test(\"Verify if name=krithiga mukundan\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.name).to.eql(\"krithiga mukundan\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify if email=krithi043@15ce.com\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.email).to.eql(\"krithi043@15ce.com\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify if id=6921460\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.id).to.eql(6921460);\r",
													"});\r",
													"\r",
													"console.log(\"Datatype is \"+typeof(pm.response.json().id));\r",
													"console.log(typeof(pm.response.json().email));\r",
													"console.log(typeof(pm.response.json().name));\r",
													"console.log(typeof(pm.response.json().status));\r",
													"\r",
													"//CAPTURE THE REQUEST ATTRIBUTES\r",
													"\r",
													"console.log(\"The HTTP method used in this request is\"+pm.request.method);\r",
													"console.log(\"The api URL used in this request is\"+pm.request.url)\r",
													"console.log(\"The payload used in this request is\"+pm.request.body);\r",
													"console.log(\"The request size used in this request is\");\r",
													"\r",
													"console.log(pm.request.size());\r",
													"console.log(\"Request headers:\");\r",
													"console.log(pm.request.headers);\r",
													"console.log(\"API Name is \"+pm.info.requestName);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"krithiga mukundan\", \"email\":\"krithi043@15ce.com\",  \"gender\": \"female\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users/6930726",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users",
												"6930726"
											]
										},
										"description": "StartFragment\n\nAdd UPDATE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
									},
									"response": []
								}
							]
						},
						{
							"name": "BROKEN ENDPOINT",
							"item": [
								{
									"name": "BROKEN_ENDPOINT V2",
									"item": [
										{
											"name": "LIST USERS API",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
															"    pm.response.to.be.error;\r",
															"    });"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{cACCESSTOKEN}}"
													}
												],
												"url": {
													"raw": "https://gorest.co.in/private/v2/users",
													"protocol": "https",
													"host": [
														"gorest",
														"co",
														"in"
													],
													"path": [
														"private",
														"v2",
														"users"
													]
												},
												"description": "StartFragment\n\nreate a workspace-ComcastTraining\n\nCreate a collection-Project1RestAPIs\n\nAdd LIST USERS API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test result\n\nEndFragment"
											},
											"response": []
										},
										{
											"name": "Create user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
															"    pm.response.to.be.error;\r",
															"    });"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\":\"Krithiga123\", \"gender\":\"Female\", \"email\":\"krithi02@15ce.com\", \"status\":\"active\"}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://gorest.co.in/privatev2/users",
													"protocol": "https",
													"host": [
														"gorest",
														"co",
														"in"
													],
													"path": [
														"privatev2",
														"users"
													]
												},
												"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
											},
											"response": []
										},
										{
											"name": "Update user",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
															"    pm.response.to.be.error;\r",
															"    });"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"name\":\"krithiga mukundan\", \"email\":\"krithi043@15ce.com\",  \"gender\": \"female\", \"status\":\"active\"}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://gorest.co.in/private/v2/users/6921460",
													"protocol": "https",
													"host": [
														"gorest",
														"co",
														"in"
													],
													"path": [
														"private",
														"v2",
														"users",
														"6921460"
													]
												},
												"description": "StartFragment\n\nAdd UPDATE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
											},
											"response": []
										},
										{
											"name": "New Request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
															"    pm.response.to.be.error;\r",
															"    });"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "https://gorest.co.in/private/v2/users/6921433",
													"protocol": "https",
													"host": [
														"gorest",
														"co",
														"in"
													],
													"path": [
														"private",
														"v2",
														"users",
														"6921433"
													]
												},
												"description": "StartFragment\n\nAdd DELETE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
											},
											"response": []
										}
									]
								},
								{
									"name": "LIST USERS API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{cACCESSTOKEN}}"
											}
										],
										"url": {
											"raw": "https://gorest.co.in/public/",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												""
											]
										},
										"description": "StartFragment\n\nreate a workspace-ComcastTraining\n\nCreate a collection-Project1RestAPIs\n\nAdd LIST USERS API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test result\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Create user Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"Krithiga123\", \"gender\":\"Female\", \"email\":\"krithi02@15ce.com\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												""
											]
										},
										"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
									},
									"response": []
								},
								{
									"name": "Update user Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"krithiga mukundan\", \"email\":\"krithi043@15ce.com\",  \"gender\": \"female\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										},
										"description": "StartFragment\n\nAdd UPDATE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "New Request Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users/",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users",
												""
											]
										},
										"description": "StartFragment\n\nAdd DELETE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
									},
									"response": []
								}
							]
						},
						{
							"name": "PAYLOAD TAMPERING",
							"item": [
								{
									"name": "Create user with invalid gender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"Krithiga123\", \"gender\":\"Females\", \"email\":\"krithi02@15ce.com\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										},
										"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
									},
									"response": []
								},
								{
									"name": "Create user with invalid status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"Krithiga123\", \"gender\":\"Female\", \"email\":\"krithi0q2@15ce.com\", \"status\":\"In Progress\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										},
										"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
									},
									"response": []
								},
								{
									"name": "Create user with invalid data type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"123456\", \"gender\":\"Female\", \"email\":\"krithiw02@15ce.com\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										},
										"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
									},
									"response": []
								},
								{
									"name": "Create user with invalid data length",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"Krithi Raghav Vidhya Mukundan abc def ghi jkl mno pqr stu vwx yz Krithi Raghav Vidhya Mukundan abc def ghi jkl mno pqr stu vwx yz Krithi Raghav Vidhya Mukundan abc def ghi jkl mno pqr stu vwx yz Krithi Raghav Vidhya Mukundan abc def ghi jkl mno pqr stu vwx yz\", \"gender\":\"Female\", \"email\":\"{{$randomEmail}}\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										},
										"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
									},
									"response": []
								},
								{
									"name": "Create user with missing payload fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"Krithiga123\", \"email\":\"krithi02@15ce.com\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										},
										"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
									},
									"response": []
								},
								{
									"name": "Create user with extra payload fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"Krithiga123\", \"gender\":\"Female\", \"email\":\"krithi0q2@15ce.com\", \"status\":\"active\", \"abc\":\"def\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users"
											]
										},
										"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
									},
									"response": []
								},
								{
									"name": "Update user blank email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"krithiga mukundan\", \"email\":\" \",  \"gender\": \"female\", \"status\":\"active\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users/6930726",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users",
												"6930726"
											]
										},
										"description": "StartFragment\n\nAdd UPDATE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
									},
									"response": []
								},
								{
									"name": "Update user missing status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is error 4xx or 5xx\", function() {\r",
													"    pm.response.to.be.error;\r",
													"    });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"krithiga mukundan\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://gorest.co.in/public/v2/users/6930726",
											"protocol": "https",
											"host": [
												"gorest",
												"co",
												"in"
											],
											"path": [
												"public",
												"v2",
												"users",
												"6930726"
											]
										},
										"description": "StartFragment\n\nAdd UPDATE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if response body is received in json format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response time from server is \"+pm.response.responseTime+\" ms\");\r",
									"\r",
									"\r",
									"console.log(\"The response size received from server is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"\r",
									"console.log(\"The response body received from server in JSON format is \");\r",
									"console.log(pm.response.json());        // print in json format\r",
									"\r",
									"\r",
									"console.log(\"The response body received from server in TEXT format is \");\r",
									"console.log(pm.response.text());        // print in text format\r",
									"\r",
									"\r",
									"console.log(\"The response headers received from server are \");\r",
									"console.log(pm.response.headers);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cACCESSTOKEN}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "StartFragment\n\nreate a workspace-ComcastTraining\n\nCreate a collection-Project1RestAPIs\n\nAdd LIST USERS API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test result\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if response body is received in json format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"pm.test(\"Verify if name=Krithiga123\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Krithiga123\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if email=krithi02@15ce.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"krithi02@15ce.com\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"name\": \"Krithiga123\",\r\n\t\"gender\": \"{{GENDERF}}\",\r\n\t\"email\": \"krithi0w2@15ce.com\",\r\n\t\"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if response body is received in json format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Verify if name=krithiga mukundan\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"krithiga mukundan\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if email=krithi043@15ce.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"krithi043@15ce.com\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if id=6921460\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(6921460);\r",
									"});\r",
									"\r",
									"console.log(\"Datatype is \"+typeof(pm.response.json().id));\r",
									"console.log(typeof(pm.response.json().email));\r",
									"console.log(typeof(pm.response.json().name));\r",
									"console.log(typeof(pm.response.json().status));\r",
									"\r",
									"//CAPTURE THE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The HTTP method used in this request is\"+pm.request.method);\r",
									"console.log(\"The api URL used in this request is\"+pm.request.url)\r",
									"console.log(\"The payload used in this request is\"+pm.request.body);\r",
									"console.log(\"The request size used in this request is\");\r",
									"\r",
									"console.log(pm.request.size());\r",
									"console.log(\"Request headers:\");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"API Name is \"+pm.info.requestName);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"krithiga mukundan\", \"email\":\"krithi043@15ce.com\",  \"gender\": \"female\", \"status\":\"active\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/6921460",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6921460"
							]
						},
						"description": "StartFragment\n\nAdd UPDATE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Verify if response body is Not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/6921433",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6921433"
							]
						},
						"description": "StartFragment\n\nAdd DELETE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
					},
					"response": []
				}
			]
		},
		{
			"name": "POSITIVE TC Copy",
			"item": [
				{
					"name": "LIST USERS API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if response body is received in json format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"\r",
									"console.log(\"The response code is \"+pm.response.code);\r",
									"console.log(\"The response message is \"+pm.response.status);\r",
									"console.log(\"The response time from server is \"+pm.response.responseTime+\" ms\");\r",
									"\r",
									"\r",
									"console.log(\"The response size received from server is \");\r",
									"console.log(pm.response.size());\r",
									"\r",
									"\r",
									"console.log(\"The response body received from server in JSON format is \");\r",
									"console.log(pm.response.json());        // print in json format\r",
									"\r",
									"\r",
									"console.log(\"The response body received from server in TEXT format is \");\r",
									"console.log(pm.response.text());        // print in text format\r",
									"\r",
									"\r",
									"console.log(\"The response headers received from server are \");\r",
									"console.log(pm.response.headers);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cACCESSTOKEN}}"
							}
						],
						"url": {
							"raw": "https://{{URL}}/public/v2/users",
							"protocol": "https",
							"host": [
								"{{URL}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "StartFragment\n\nreate a workspace-ComcastTraining\n\nCreate a collection-Project1RestAPIs\n\nAdd LIST USERS API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test result\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if response body is received in json format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"var schema = {\r",
									"    \"items\": {\r",
									"        \"type\": \"boolean\"\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"pm.test(\"Verify if name=Krithiga123\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Krithiga123\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if email=krithi02@15ce.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"krithi02@15ce.com\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"GENERICEmail\", \"abc@comcast.org\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Krithiga123\", \"gender\":\"female\", \"email\":\"{{GENERICEmail}}\", \"status\":\"active\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						},
						"description": "StartFragment\n\nExpected Result:\n\n- StartFragmentVerify if status is active or inactive-PASSEDEndFragment  \n      \n    \n    - Verify if response code received from server is 201 Created-PASSED\n        \n    - Verify if response time from server < 5 seconds-PASSED\n        \n    - Verify if response body is received from server-PASSED\n        \n    - Verify if response body received from server is in JSON format-PASSED\n        \n    - Verify if response body contains fields such as _id, name, email, gender, status_\\-PASSED\n        \n    - Verify if gender is either male or female-PASSED"
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"pm.test(\"Verify if response body is received in json format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if response body contains fields such as id, name, email, gender, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\")\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\")\r",
									"    pm.expect(pm.response.text()).to.include(\"status\")\r",
									"});\r",
									"pm.test(\"Verify if name=krithiga mukundan\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"krithiga mukundan\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if email=krithi043@15ce.com\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"krithi043@15ce.com\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify if id=6921460\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(6921460);\r",
									"});\r",
									"\r",
									"console.log(\"Datatype is \"+typeof(pm.response.json().id));\r",
									"console.log(typeof(pm.response.json().email));\r",
									"console.log(typeof(pm.response.json().name));\r",
									"console.log(typeof(pm.response.json().status));\r",
									"\r",
									"//CAPTURE THE REQUEST ATTRIBUTES\r",
									"\r",
									"console.log(\"The HTTP method used in this request is\"+pm.request.method);\r",
									"console.log(\"The api URL used in this request is\"+pm.request.url)\r",
									"console.log(\"The payload used in this request is\"+pm.request.body);\r",
									"console.log(\"The request size used in this request is\");\r",
									"\r",
									"console.log(pm.request.size());\r",
									"console.log(\"Request headers:\");\r",
									"console.log(pm.request.headers);\r",
									"console.log(\"API Name is \"+pm.info.requestName);\r",
									"pm.collectionVariables.set(\"cName\", \"Kishore\");\r",
									"pm.collectionVariables.set(\"cGender\", \"male\");\r",
									"pm.collectionVariables.set(\"cStatus\", \"active\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
							},
							{
								"key": "",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"{{cName}}\", \"email\":\"{{GENERICEmail}}\",  \"gender\": \"{{GENDERF}}\", \"status\":\"{{StatusActive}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/6921460",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6921460"
							]
						},
						"description": "StartFragment\n\nAdd UPDATE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"pm.test(\"Verify if response body is Not received from server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 107c60e97476e3c8a27d8cdc6875d5c5ed063f86695cd03f7769ee0acc649f54"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/6921433",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"6921433"
							]
						},
						"description": "StartFragment\n\nAdd DELETE USER API\n\nWrite the documentation\n\nSave\n\nExecute\n\nAnalyse the test results\n\nEndFragment"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "gorest.co.in",
			"type": "string"
		},
		{
			"key": "cName",
			"value": ""
		},
		{
			"key": "cGender",
			"value": ""
		},
		{
			"key": "cStatus",
			"value": ""
		}
	]
}